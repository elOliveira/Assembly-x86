org 0x7c00;
jmp 0x0000:start

hello db 'Digite a palavra', 13,10,0 ;  reservando espaco na memoria para string
stringEntrada times 10 db 0; reservando memoria para a entrada do teclado

funcaoZerandoReg:
  xor ax, ax; zerando ax
  mov ds, ax; zerando ds
  mov es, ax; zerando es
  mov cx, 0 ; zerando o contador cx

  .done: ret  ; retorna para a funcao anterior


start:

    call funcaoZerandoReg ; zerando os reg basicos

    mov si, hello;  faz si apontar para inicio de 'hello
    call print_string ; printando string 1

    call funcaoZerandoReg
    mov si,stringEntrada
    call inputTeclado

    mov si, hello;  faz si apontar para inicio de 'hello
    call print_string ; printando string 1



    mov si, stringEntrada
    call print_string;

    jmp done
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

preencheString:


  ; apontar para o inicio da string so na 1 vezzz
  ; dar um pop [string] e dps incrementar o contador p poder continuar preenchendo o resto da string

  ; apontar
  mov si, ax;  pegando o que tava reservado em ax lida pelo teclado e armazenando na string
  inc si
  jmp inputTeclado

inputTeclado:

    mov ah,0;   codigo da instrucao para imprimir um caractere que est√° em al
    int 16h ;   inicia interrupcao para receber do teclado

    push ax;   manda as coisas que tao no reg   para a pilha
    inc cx ;   incrementando cx

    ; inicia a int de vd
    mov ah, 0xe
    mov bh, 0
    int 10h
    cmp al,13                 ; comparando se foi apertada a tecla enter
      je .done                ; se apertou, vai sair da funcao
      jne preencheString        ; caso nao, vai continuar preenchendo a string

    .done:
        ret; retorna para a subrotina anterior

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; aqui ta tudo normal ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
print_string:
    lodsb;  carrega uma letra de si em al e passa para o proximo char
    cmp al,0 ; verifica se chegou ao final da string (equivalente a um \0)
      je .done

    mov ah, 0eh ;
    int 10h ; interrupcao de video
    jmp print_string
    .done:
    ret; retornna para o start
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    done:
          jmp $

times 510-($-$$) db 0
dw 0xaa55
